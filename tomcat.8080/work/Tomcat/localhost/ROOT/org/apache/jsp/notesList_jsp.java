/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-10 00:26:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import uk.ac.ucl.model.Note;
import uk.ac.ucl.model.Model;
import uk.ac.ucl.model.ModelFactory;
import org.w3c.dom.Node;

public final class notesList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("uk.ac.ucl.model.Model");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("uk.ac.ucl.model.ModelFactory");
    _jspx_imports_classes.add("uk.ac.ucl.model.Note");
    _jspx_imports_classes.add("org.w3c.dom.Node");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/meta.jsp", out, false);
      out.write("\n");
      out.write("  <title>Notes App</title>\n");
      out.write("  <style>\n");
      out.write("    body {\n");
      out.write("      max-width: 800px;\n");
      out.write("      margin: 0 auto;\n");
      out.write("      padding: 20px;\n");
      out.write("      font-family: 'Georgia', serif;\n");
      out.write("      background-color: #f4f1ea;\n");
      out.write("      color: #5a4d41;\n");
      out.write("    }\n");
      out.write("    h1 {\n");
      out.write("      text-align: center;\n");
      out.write("      color: #8b7d6b;\n");
      out.write("    }\n");
      out.write("    .header-row, .note-row {\n");
      out.write("      display: flex;\n");
      out.write("      padding: 10px;\n");
      out.write("      border-bottom: 1px solid #d9d2c9;\n");
      out.write("    }\n");
      out.write("    .header-row {\n");
      out.write("      font-weight: bold;\n");
      out.write("      background-color: #e6e0d4;\n");
      out.write("    }\n");
      out.write("    .note-row a, .note-row span, .header-row span {\n");
      out.write("      display: inline-block;\n");
      out.write("      text-align: center;\n");
      out.write("    }\n");
      out.write("    .index {\n");
      out.write("      flex: 0 0 15%;\n");
      out.write("    }\n");
      out.write("    .label {\n");
      out.write("      flex: 1;\n");
      out.write("    }\n");
      out.write("    .text {\n");
      out.write("      flex: 0 0 25%;\n");
      out.write("    }\n");
      out.write("    .timestamp {\n");
      out.write("      flex: 0 0 30%;\n");
      out.write("    }\n");
      out.write("    .note-row a {\n");
      out.write("      color: #a67f59;\n");
      out.write("      text-decoration: none;\n");
      out.write("    }\n");
      out.write("    .note-row a:hover {\n");
      out.write("      text-decoration: underline;\n");
      out.write("    }\n");
      out.write("    .back-button, select, input[type=\"submit\"] {\n");
      out.write("      display: block;\n");
      out.write("      width: 200px;\n");
      out.write("      margin: 10px auto;\n");
      out.write("      padding: 10px;\n");
      out.write("      background-color: #a67f59;\n");
      out.write("      color: #f4f1ea;\n");
      out.write("      border: none;\n");
      out.write("      border-radius: 5px;\n");
      out.write("      font-family: 'Georgia', serif;\n");
      out.write("      font-size: 1.1em;\n");
      out.write("      text-align: center;\n");
      out.write("      cursor: pointer;\n");
      out.write("    }\n");
      out.write("    .back-button:hover, select:hover, input[type=\"submit\"]:hover {\n");
      out.write("      background-color: #8b7d6b;\n");
      out.write("      text-decoration: underline;\n");
      out.write("    }\n");
      out.write("    .sort-form {\n");
      out.write("      display: flex;\n");
      out.write("      justify-content: center;\n");
      out.write("      gap: 10px;\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/header.jsp", out, false);
      out.write("\n");
      out.write("<h1>Notes</h1>\n");
      out.write("<form class=\"sort-form\" action=\"/notesList.html\" method=\"get\">\n");
      out.write("  <select name=\"sortBy\">\n");
      out.write("    <option value=\"index\" ");
      out.print( "index".equals(request.getParameter("sortBy")) ? "selected" : "" );
      out.write(">Sort by Index</option>\n");
      out.write("    <option value=\"time_newest\" ");
      out.print( "time_newest".equals(request.getParameter("sortBy")) ? "selected" : "" );
      out.write(">Sort by Time (Newest First)</option>\n");
      out.write("    <option value=\"time_oldest\" ");
      out.print( "time_oldest".equals(request.getParameter("sortBy")) ? "selected" : "" );
      out.write(">Sort by Time (Oldest First)</option>\n");
      out.write("  </select>\n");
      out.write("  <input type=\"submit\" value=\"Sort\">\n");
      out.write("</form>\n");
      out.write("<div>\n");
      out.write("  <div class=\"header-row\">\n");
      out.write("    <span class=\"index\">Index</span>\n");
      out.write("    <span class=\"label\">Label</span>\n");
      out.write("    <span class=\"text\">Text</span>\n");
      out.write("    <span class=\"timestamp\">Time</span>\n");
      out.write("  </div>\n");
      out.write("  ");

    Model model = (Model) request.getAttribute("model");
    if (model != null && model.getNoteList() != null) {
      List<Note> originalNotes = model.getNoteList(); // 原始列表
      List<Note> notes = new java.util.ArrayList<>(originalNotes); // 创建副本用于排序
      String sortBy = request.getParameter("sortBy");

      // 只在首次加载（sortBy == null）时分配 index
      if (sortBy == null) {
        for (int i = 0; i < notes.size(); i++) {
          model.setNoteIndex(i, Integer.toString(i + 1));
        }
      }

      // 根据用户选择排序副本列表
      if ("index".equals(sortBy)) {
        notes.sort((n1, n2) -> Integer.parseInt(n1.getIndex()) - Integer.parseInt(n2.getIndex()));
      } else if ("time_newest".equals(sortBy)) {
        notes.sort((n1, n2) -> n2.getTimestamp().compareTo(n1.getTimestamp()));
      } else if ("time_oldest".equals(sortBy)) {
        notes.sort((n1, n2) -> n1.getTimestamp().compareTo(n2.getTimestamp()));
      }

      // 显示排序后的列表，使用原始索引查找对应位置
      for (int i = 0; i < notes.size(); i++) {
        Note currentNote = notes.get(i);
        String index = currentNote.getIndex();
        String label = currentNote.getLabel();
        String text = currentNote.getText();
        String timestamp = currentNote.getTimestamp().substring(0, 19);
        // 查找当前 Note 在原始列表中的位置
        int originalIndex = originalNotes.indexOf(currentNote);
        String href = "viewNoteInfo.html?index=" + originalIndex;
  
      out.write("\n");
      out.write("  <div class=\"note-row\">\n");
      out.write("    <a href=\"");
      out.print( href );
      out.write("\" class=\"index\">");
      out.print( index );
      out.write("</a>\n");
      out.write("    <span class=\"label\">");
      out.print( label.length() > 25 ? label.substring(0, 25) + "..." : label );
      out.write("</span>\n");
      out.write("    <span class=\"text\">");
      out.print( text.length() > 25 ? text.substring(0, 25) + "..." : text );
      out.write("</span>\n");
      out.write("    <span class=\"timestamp\">");
      out.print( timestamp );
      out.write("</span>\n");
      out.write("  </div>\n");
      out.write("  ");

      }
    } else {
      out.println("<p style='text-align: center; color: #a67f59;'>No notes available.</p>");
    }
  
      out.write("\n");
      out.write("</div>\n");
      out.write("<button class=\"back-button\" onclick=\"window.location.href='http://localhost:8080'\">Back to Home</button>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
