/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-10 23:10:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uk.ac.ucl.model.Category;

public final class createNewNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("uk.ac.ucl.model.Category");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Create New Note</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            max-width: 800px;\n");
      out.write("            margin: 0 auto;\n");
      out.write("            padding: 20px;\n");
      out.write("            font-family: 'Georgia', serif;\n");
      out.write("            background-color: #f4f1ea;\n");
      out.write("            color: #5a4d41;\n");
      out.write("        }\n");
      out.write("        h1 {\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        form {\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("            gap: 15px;\n");
      out.write("            max-width: 500px;\n");
      out.write("            margin: 20px auto;\n");
      out.write("        }\n");
      out.write("        label {\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        input[type=\"text\"], textarea, select {\n");
      out.write("            width: 100%;\n");
      out.write("            padding: 8px;\n");
      out.write("            border: 1px solid #d9d2c9;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            background-color: #fffcf7;\n");
      out.write("            color: #5a4d41;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("            font-family: 'Georgia', serif;\n");
      out.write("        }\n");
      out.write("        textarea {\n");
      out.write("            height: 100px;\n");
      out.write("            resize: vertical;\n");
      out.write("        }\n");
      out.write("        select {\n");
      out.write("            appearance: none;\n");
      out.write("            background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"%235a4d41\"><polygon points=\"0,0 20,0 10,10\"/></svg>');\n");
      out.write("            background-repeat: no-repeat;\n");
      out.write("            background-position: right 10px top 50%;\n");
      out.write("            background-size: 12px;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        input[type=\"submit\"], .back-button {\n");
      out.write("            padding: 10px;\n");
      out.write("            background-color: #a67f59;\n");
      out.write("            color: #f4f1ea;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        input[type=\"submit\"]:hover, .back-button:hover {\n");
      out.write("            background-color: #8b6a47;\n");
      out.write("            text-decoration: underline;\n");
      out.write("        }\n");
      out.write("        .back-button {\n");
      out.write("            text-align: center;\n");
      out.write("            width: 200px;\n");
      out.write("            margin: 20px auto;\n");
      out.write("            display: block;\n");
      out.write("        }\n");
      out.write("        #special-field, #image-field {\n");
      out.write("            display: none;\n");
      out.write("        }\n");
      out.write("        #drop-zone {\n");
      out.write("            border: 2px dashed #d9d2c9;\n");
      out.write("            padding: 20px;\n");
      out.write("            text-align: center;\n");
      out.write("            background-color: #fffcf7;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            min-height: 100px;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("        #drop-zone.dragover {\n");
      out.write("            background-color: #e6e2d9;\n");
      out.write("            border-color: #a67f59;\n");
      out.write("        }\n");
      out.write("        #image-preview {\n");
      out.write("            margin-top: 10px;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        #image-preview img {\n");
      out.write("            max-width: 100%;\n");
      out.write("            max-height: 300px;\n");
      out.write("            object-fit: contain;\n");
      out.write("            border-radius: 5px;\n");
      out.write("        }\n");
      out.write("        .error-message {\n");
      out.write("            color: #a94442;\n");
      out.write("            text-align: center;\n");
      out.write("            margin-top: 10px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h1>Create a New Note</h1>\n");
      out.write("<form action=\"/createNewNote.html\" method=\"post\" id=\"noteForm\">\n");
      out.write("    <label for=\"label\">Label:</label>\n");
      out.write("    <input type=\"text\" id=\"label\" name=\"label\" placeholder=\"Enter note label\">\n");
      out.write("\n");
      out.write("    <label for=\"category\">Category:</label>\n");
      out.write("    <select id=\"category\" name=\"category\">\n");
      out.write("        ");
 for (Category c : Category.values()) { 
      out.write("\n");
      out.write("        <option value=\"");
      out.print( c.getDisplayName() );
      out.write('"');
      out.write('>');
      out.print( c.getDisplayName() );
      out.write("</option>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </select>\n");
      out.write("\n");
      out.write("    <label for=\"type\">Type:</label>\n");
      out.write("    <select id=\"type\" name=\"type\">\n");
      out.write("        <option value=\"DEFAULT\">Default Note</option>\n");
      out.write("        <option value=\"LINK\">Note with external link</option>\n");
      out.write("        <option value=\"IMAGE\">Note with picture</option>\n");
      out.write("    </select>\n");
      out.write("\n");
      out.write("    <div id=\"special-field\">\n");
      out.write("        <label for=\"special\">External Link</label>\n");
      out.write("        <input type=\"text\" id=\"special\" name=\"special\" placeholder=\"URL of anything\">\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div id=\"image-field\">\n");
      out.write("        <label>Image Upload</label>\n");
      out.write("        <div id=\"drop-zone\">\n");
      out.write("            Drag and drop an image here<br>\n");
      out.write("            <small>(or click to select, max 5MB)</small>\n");
      out.write("            <input type=\"file\" id=\"image-input\" accept=\"image/*\" style=\"display: none;\">\n");
      out.write("        </div>\n");
      out.write("        <input type=\"hidden\" id=\"image-url\" name=\"imageUrl\">\n");
      out.write("        <div id=\"image-preview\"></div>\n");
      out.write("        <div id=\"error-message\" class=\"error-message\"></div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <label for=\"text\">Text:</label>\n");
      out.write("    <textarea id=\"text\" name=\"text\" placeholder=\"Enter note text\"></textarea>\n");
      out.write("\n");
      out.write("    <input type=\"submit\" value=\"Create Note\">\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<button class=\"back-button\" onclick=\"window.history.back();\">Back</button>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    const typeSelect = document.getElementById('type');\n");
      out.write("    const specialField = document.getElementById('special-field');\n");
      out.write("    const imageField = document.getElementById('image-field');\n");
      out.write("    const dropZone = document.getElementById('drop-zone');\n");
      out.write("    const imageInput = document.getElementById('image-input');\n");
      out.write("    const imageUrlInput = document.getElementById('image-url');\n");
      out.write("    const imagePreview = document.getElementById('image-preview');\n");
      out.write("    const errorMessage = document.getElementById('error-message');\n");
      out.write("    const maxFileSize = 5 * 1024 * 1024; // 5MB\n");
      out.write("\n");
      out.write("    function updateFields() {\n");
      out.write("        const value = typeSelect.value;\n");
      out.write("        specialField.style.display = value === 'LINK' ? 'block' : 'none';\n");
      out.write("        imageField.style.display = value === 'IMAGE' ? 'block' : 'none';\n");
      out.write("        if (value !== 'IMAGE') {\n");
      out.write("            clearImagePreview();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function clearImagePreview() {\n");
      out.write("        imagePreview.innerHTML = '';\n");
      out.write("        imageUrlInput.value = '';\n");
      out.write("        errorMessage.textContent = '';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function handleImage(file) {\n");
      out.write("        if (!file) {\n");
      out.write("            errorMessage.textContent = 'No file selected.';\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (!file.type.startsWith('image/')) {\n");
      out.write("            errorMessage.textContent = 'Please upload an image file.';\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (file.size > maxFileSize) {\n");
      out.write("            errorMessage.textContent = 'File size exceeds 5MB limit.';\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        const reader = new FileReader();\n");
      out.write("        reader.onload = (e) => {\n");
      out.write("            const imageData = e.target.result;\n");
      out.write("            imageUrlInput.value = imageData;\n");
      out.write("            imagePreview.innerHTML = `<img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${imageData}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"Preview\">`;\n");
      out.write("            errorMessage.textContent = '';\n");
      out.write("        };\n");
      out.write("        reader.onerror = () => {\n");
      out.write("            errorMessage.textContent = 'Error loading image.';\n");
      out.write("        };\n");
      out.write("        reader.readAsDataURL(file);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    typeSelect.addEventListener('change', updateFields);\n");
      out.write("    window.addEventListener('load', updateFields);\n");
      out.write("\n");
      out.write("    dropZone.addEventListener('dragover', (e) => {\n");
      out.write("        e.preventDefault();\n");
      out.write("        dropZone.classList.add('dragover');\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    dropZone.addEventListener('dragleave', () => {\n");
      out.write("        dropZone.classList.remove('dragover');\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    dropZone.addEventListener('drop', (e) => {\n");
      out.write("        e.preventDefault();\n");
      out.write("        dropZone.classList.remove('dragover');\n");
      out.write("        const file = e.dataTransfer.files[0];\n");
      out.write("        handleImage(file);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    dropZone.addEventListener('click', () => {\n");
      out.write("        imageInput.click();\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    imageInput.addEventListener('change', (e) => {\n");
      out.write("        const file = e.target.files[0];\n");
      out.write("        handleImage(file);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // Clear image input after selection to prevent re-upload issues\n");
      out.write("    imageInput.addEventListener('click', () => {\n");
      out.write("        imageInput.value = '';\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
